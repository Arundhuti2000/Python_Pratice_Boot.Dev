class ConcertTicketBuyer:
    def __init__(self):
        self.current_requirements = {}
        self.current_message = {}
        self.processed_messages = set()

    def on_new_requirement(self, artist_id: int, ticket_price: int, available_seats: int):
        requirement_key = artist_id
        self.current_requirements[requirement_key] = {
            'artist_id': artist_id,
            'ticket_price': ticket_price,
            'available_seats': available_seats,
            'complete': False,
            'message_id': None
        }

    def process_data(self, message_id: int, data: int):
        if message_id not in self.current_message:
            self.current_message[message_id] = {'packet_count': 0}
            
        self.current_message[message_id]['packet_count'] += 1
        message = self.current_message[message_id]['packet_count']
        
        if message == 1:
            self.current_message[message_id]['artist_id'] = data
        elif message == 2:
            self.current_message[message_id]['ticket_price'] = data
        elif message == 3:
            self.current_message[message_id]['available_seats'] = data
            return self.check_and_create_order(message_id)
        
        return 0

    def check_and_create_order(self, message_id):
        if message_id in self.processed_messages:
            return 0
            
        msg = self.current_message[message_id]
        artist_id = msg['artist_id']
        
        if artist_id not in self.current_requirements:
            return 0
            
        req = self.current_requirements[artist_id]
        
        if req['complete'] or req['message_id']:
            return 0
            
        if (msg['ticket_price'] <= req['ticket_price']) and (msg['available_seats'] >= req['available_seats']):
            req['message_id'] = message_id
            self.processed_messages.add(message_id)
            return message_id
            
        return 0

def main():
    engine = ConcertTicketBuyer()
    
    test_cases = [
        ("REQUIREMENT", 1, 100, 3),
        ("DATA", 1, 1),
        ("DATA", 1, 110),
        ("DATA", 1, 3),
        ("DATA", 0, 0),
        ("DATA", 2, 1),
        ("DATA", 2, 90),
        ("DATA", 2, 4),
        ("DATA", 0, 0),
        ("DATA", 0, 0)
    ]
    
    for test in test_cases:
        if test[0] == "REQUIREMENT":
            engine.on_new_requirement(test[1], test[2], test[3])
            print(0)
        else:
            result = engine.process_data(test[1], test[2])
            print(result)

if __name__ == "__main__":
    main()